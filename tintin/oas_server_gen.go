// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// TintinsGet implements GET /tintins operation.
	//
	// Get all Tintins.
	//
	// GET /tintins
	TintinsGet(ctx context.Context) ([]Tintin, error)
	// TintinsIDDelete implements DELETE /tintins/{id} operation.
	//
	// Delete a Tintin by ID.
	//
	// DELETE /tintins/{id}
	TintinsIDDelete(ctx context.Context, params TintinsIDDeleteParams) (TintinsIDDeleteRes, error)
	// TintinsIDGet implements GET /tintins/{id} operation.
	//
	// Get a Tintin by ID.
	//
	// GET /tintins/{id}
	TintinsIDGet(ctx context.Context, params TintinsIDGetParams) (TintinsIDGetRes, error)
	// TintinsIDPut implements PUT /tintins/{id} operation.
	//
	// Update a Tintin by ID.
	//
	// PUT /tintins/{id}
	TintinsIDPut(ctx context.Context, req *Tintin, params TintinsIDPutParams) (TintinsIDPutRes, error)
	// TintinsPost implements POST /tintins operation.
	//
	// Create a new Tintin.
	//
	// POST /tintins
	TintinsPost(ctx context.Context, req *Tintin) (*Tintin, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
